---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ not (lookup('env', 'MOLECULE_DEBUG') | bool or molecule_yml.provisioner.log|default(false) | bool) }}"
  vars:
    ssh_user: ec2-user
    ssh_port: 22
    winrm_port: 5985
    spot_price_max_calc: 5
    windows_userdata: |
      <script>
        winrm quickconfig -q & winrm set winrm/config @{MaxTimeoutms="1800000"} & winrm set winrm/config/service @{AllowUnencrypted="true"} & winrm set winrm/config/service/auth @{Basic="true"}
      </script>
      <powershell>
      New-SelfSignedCertificate -DnsName $(Invoke-RestMethod -uri http://169.254.169.254/latest/meta-data/local-hostname) -CertStoreLocation Cert:\LocalMachine\My
      New-Item WSMan:\localhost\Listener -Address * -Transport HTTPS -HostName $(Invoke-RestMethod -uri http://169.254.169.254/latest/meta-data/local-hostname) -CertificateThumbPrint $(ls Cert:\LocalMachine\My).Thumbprint -Force
      Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
      Set-MpPreference -DisableRealtimeMonitoring $true
      </powershell>
    admin_ip: "{{ lookup('url', 'http://whatismyip.akamai.com') }}"
    security_group_name: "molecule_{{ lookup('env', 'HOSTNAME') | default(lookup('env', 'USER') | to_uuid, true) }}"
    security_group_description: Security group for testing Molecule
    security_group_rules:
      - proto: tcp
        from_port: "{{ ssh_port }}"
        to_port: "{{ ssh_port }}"
        cidr_ip: "{{ admin_ip }}/32"
      - proto: tcp
        from_port: "{{ winrm_port }}"
        to_port: "{{ winrm_port }}"
        cidr_ip: "{{ admin_ip }}/32"
      - proto: tcp
        from_port: "3389"
        to_port: "3389"
        cidr_ip: "{{ admin_ip }}/32"
      - proto: icmp
        from_port: 8
        to_port: -1
        cidr_ip: "{{ admin_ip }}/32"
      - proto: all
        from_port: 0
        to_port: 65535
        cidr_ip: "172.31.0.0/16"
    security_group_rules_egress:
      - proto: -1
        from_port: 0
        to_port: 0
        cidr_ip: "0.0.0.0/0"

    keypair_name: "molecule_key_{{ lookup('env', 'HOSTNAME') | default(lookup('env', 'USER') | to_uuid, true) }}"
    keypair_path: "{{ lookup('env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/ssh_key"
  tasks:
    - debug:
        var: molecule_yml.platforms

    - name: "Get Windows AMIs"
      ec2_ami_info:
        region: "{{ molecule_yml.platforms[0].region }}"
        owners: amazon
        filters:
          name: "Windows_Server-1809-English-Core-ContainersLatest-*"
      register: ec2_windows_amis

    - name: "get latest windows AMI"
      set_fact:
        ec2_windows_ami: "{{ ec2_windows_amis.images | sort(attribute='creation_date') | last }}"

    - name: Create security group
      ec2_group:
        name: "{{ security_group_name }}"
        description: "{{ security_group_name }}"
        rules: "{{ security_group_rules }}"
        rules_egress: "{{ security_group_rules_egress }}"
        region: "{{ molecule_yml.platforms[0].region }}"
      register: security_group

    - name: Create keypair
      ec2_key:
        name: "{{ keypair_name }}"
        region: "{{ molecule_yml.platforms[0].region }}"
      register: keypair

    - name: Persist the keypair
      copy:
        dest: "{{ keypair_path }}"
        content: "{{ keypair.key.private_key }}"
        mode: 0600
      when: keypair.changed

    - name: Create molecule instance(s)
      ec2:
        key_name: "{{ keypair_name }}"
        image: "{{ item.image if item.image is defined else ec2_windows_ami.image_id if item.windows is defined and item.windows }}"
        user_data: "{{  windows_userdata if item.windows is defined and item.windows else '' }}"
        region: "{{ item.region }}"
        zone: "{{ item.zone|default(omit) }}"
        instance_initiated_shutdown_behavior: terminate
        instance_type: "{{ item.instance_type }}"
        spot_price: "{{ item.spot_price | ternary(item.spot_price, omit) if item.spot_price is defined else spot_price_max_calc }}"
        group: "{{ security_group_name }}"
        volumes:
          - device_name: /dev/sda1
            volume_size: 100
            volume_type: gp2
            delete_on_termination: yes
        instance_tags:
          Name: "molecule {{ item.name }}"
          instance: "{{ item.name }}"
          molecule_windows: "{{ item.windows | bool if item.windows is defined else false }}"
          molecule_region: "{{ item.region }}"
          molecule_ssh_user: "{{ item.ssh_user | default(ssh_user) }}"
        wait: yes
        exact_count: 1
        count_tag:
          instance: "{{ item.name }}"
      register: server
      loop: "{{ molecule_yml.platforms }}"
      loop_control:
        index_var: index
      async: 7200
      poll: 0

    - name: Wait for instance(s) creation to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: ec2_jobs
      until: ec2_jobs.finished
      retries: 300
      with_items: "{{ server.results }}"

    # Mandatory configuration for Molecule to function.
    - name: get the Administrator password
      ec2_win_password:
        instance_id: "{{ item.instance_ids[0] }}"
        region: "{{ item.instances[0].tags.molecule_region }}"
        key_file: "{{ keypair_path }}"
        wait: yes
        wait_timeout: 600
      with_items: "{{ ec2_jobs.results }}"
      register: win_passwords
      when: server.changed | bool and item.instances[0].tags.molecule_windows | bool

    - name: "Output passwords"
      debug:
        msg: Passwords {{ win_passwords }}
    - name: Populate instance config dict
      set_fact:
        instance_conf_dict:
          {
            "instance": "{{ item.instances[0].tags.instance }}",
            "region": "{{ item.instances[0].tags.molecule_region }}",
            "address": "{{ item.instances[0].public_ip }}",
            "user": "{{ item.instances[0].tags.molecule_ssh_user }}",
            "password": "{{ win_passwords.results[index].win_password if item.instances[0].tags.molecule_windows | bool else '' }}",
            "port": "{{ winrm_port if item.instances[0].tags.molecule_windows | bool else ssh_port }}",
            "identity_file": "{{ keypair_path }}",
            "connection": "{{ 'winrm' if item.instances[0].tags.molecule_windows | bool else 'ssh' }}",
            "instance_ids": "{{ item.instance_ids }}",
          }
      loop: "{{ ec2_jobs.results }}"
      loop_control:
        index_var: index
      register: instance_config_dict
      when: server.changed | bool

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      when: server.changed | bool

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"
      when: server.changed | bool

    - name: Wait for remote connection port
      wait_for:
        port: "{{ item.port }}"
        host: "{{ item.address }}"
        # search_regex: SSH
        delay: 10
        timeout: 320
      with_items: "{{ lookup('file', molecule_instance_config) | from_yaml }}"

    - name: Wait for boot process to finish
      pause:
        seconds: 2
