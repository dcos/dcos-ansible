---
# This playbook generates the DC/OS installation/configuration files
- name: Defining DC/OS by using 'version' or, more specifically, 'image_commit'
  set_fact:
     dcos_version_specifier: "{{ dcos['image_commit'] | default(dcos['version']) }}"

- name: "Finding the provider / environment running on (AWS, GCP, AzureRM or, if nothing detected, on premise)"
  # AWS 4th gen or earlier, Xen based types:
  #   looking at `product_version` or `bios_verion`.
  # AWS 5th gen HVM based instance types:
  #   looking at `system_vendor`.
  set_fact:
    dcos_environment: >-
        {{
          (
            ('amazon' in ansible_product_version) or
            ('amazon' in ansible_bios_version) or
            ('EC2' in ansible_system_vendor)
          ) | ternary('ec2', (('Google' in ansible_system_vendor) | ternary('gcp', (('Microsoft Corporation' in ansible_system_vendor) | ternary('azurerm', 'onprem')))))
        }}
  changed_when: false

- name: Double check the prefix/cluster name and version
  pause:
    prompt: |
        Please double check the prefix/cluster name and version of this cluster:

          Cluster: {{ dcos['config']['cluster_name'] }}
          Version: {{ dcos['version_to_upgrade_from'] | default("None") }} -> {{ dcos['version'] }}
          Commit:  {{ dcos['image_commit'] | default("None") }}
          via:     {{ dcos['download'] }}

        PRESS *ENTER* OR CANCEL NOW IF IT ISN'T CORRECT
  when: dcos_cluster_name_confirmed is not defined
  register: dcos_cluster_name_confirmed
  no_log: true

# PRE DOWNLOAD vvv

- name: Install pip to install python-docker
  yum:
    name: python2-pip
    state: present
  register: dcos_yum_pythonpip_install
  retries: 3
  delay: 60
  until: dcos_yum_pythonpip_install is success

- name: Install python docker bindings
  pip:
    name: docker
    state: present
  register: dcos_pip_docker_install
  retries: 3
  delay: 60
  until: dcos_pip_docker_install is success

- name: Setting download dir
  set_fact:
     download_path: "{{ download_base_dir }}/{{ dcos_version_specifier }}"
     install_file: "{{ dcos['download']|basename }}"

- name: Setting windows install file
  set_fact:
     install_win_file: "{{ dcos['download_win']|basename }}"
  when: dcos['download_win'] is defined

- name: Purge old upgrade directory
  file:
    path: "{{ download_path }}/genconf/serve/*"
    state: absent
  when: "dcos['version'] is version('1.9', '>=')"
  loop: >
    {{ groups['dcos'] | default([]) | map('extract',hostvars,'ansible_local')| list |
     select('defined') | selectattr('dcos_installation', 'defined') |
     map(attribute='dcos_installation') | map(attribute='version') | list |
     union([dcos['version_to_upgrade_from'] | default(dcos['version']) ]) | unique }}

- name: Create Linux install directory/genconf
  file: path={{ download_path }}/genconf state=directory mode=0755

- name: Create Windows install directory/genconf_win
  file: path={{ download_path }}/genconf_win state=directory mode=0755
  when: dcos['download_win'] is defined

- name: Create bootstrap CA directory
  file: path={{ download_path }}/genconf/ca state=directory mode=0700

- name: "Set PSK path"
  set_fact:
    psk_path: "{{ download_path }}/genconf/ca/psk"
  when: dcos.enterprise_dcos

- name: "Stat the existing PSK"
  stat:
    path: "{{ psk_path }}"
  register: psk_stat
  when: dcos.enterprise_dcos

- name: "Read existing PSK contents"
  slurp:
    src: "{{ psk_path }}"
  register: psk_contents
  when: dcos.enterprise_dcos and psk_stat.stat.exists

- name: "Generate PSK for exhibitor bootstrap"
  set_fact:
    random_psk_result: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters') }}"
  when: dcos.enterprise_dcos and not psk_stat.stat.exists

- name: Write CA service PSK
  copy:
    dest: "{{ psk_path }}"
    mode: 0600
    content: "{{ random_psk_result }}"
  when: dcos.enterprise_dcos and not psk_stat.stat.exists

- name: Delegate psk variable from disk
  set_fact:
    delegated_psk: "{{ psk_contents['content'] | b64decode }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['masters'] }}"
  when: dcos.enterprise_dcos and psk_stat.stat.exists

- name: Delegate psk variable from password generator
  set_fact:
    delegated_psk: "{{ random_psk_result }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['masters'] }}"
  when: dcos.enterprise_dcos and not psk_stat.stat.exists

#  vvv DOWNLOAD vvv

- name: Download Linux installation file
  get_url:
    url: "{{ dcos['download'] }}"
    checksum: "{{ dcos['download_checksum'] | default(omit) }}"
    dest: "{{ download_path }}/{{ install_file }}"
    mode: 0440

- name: Download Windows installation file
  get_url:
    url: "{{ dcos['download_win'] }}"
    checksum: "{{ dcos['download_win_checksum'] | default(omit) }}"
    dest: "{{ download_path }}/{{ install_win_file }}"
    mode: 0440
  when: dcos['download_win'] is defined

# vvv POST DOWNLOAD / configuration vvv

- name: "Set default IP detection script for {{ dcos_environment }} (overwrite by setting `dcos.config.ip_detect_contents`)"
  template:
    src: "{{ dcos_environment }}/ip-detect.j2"
    dest: "{{ download_path }}/genconf/ip-detect"
    mode: 0644
  when: "dcos.config.ip_detect_contents is not defined"
  notify: trigger_new_config

- name: "Set default public IP detection script for {{ dcos_environment }} (overwrite by setting `dcos.config.ip_detect_public_contents`)"
  template:
    src: "{{ dcos_environment }}/ip-detect-public.j2"
    dest: "{{ download_path }}/genconf/ip-detect-public"
    mode: 0644
  when: "dcos.config.ip_detect_public_contents is not defined"
  notify: trigger_new_config

- name: "Set default fault domain detection script for {{ dcos_environment }} (overwrite by setting `dcos.config.fault_domain_detect_contents`)"
  template:
    src: "{{ dcos_environment }}/fault-domain-detect.sh.j2"
    dest: "{{ download_path }}/genconf/fault-domain-detect"
    mode: 0644
  when: "dcos.config.fault_domain_detect_contents is not defined"
  notify: trigger_new_config

- name: "Set default IP detection Powershell script for {{ dcos_environment }} (overwrite by setting `dcos.config.ip_detect_win_contents`)"
  template:
    src: "{{ dcos_environment }}/ip-detect-win.j2"
    dest: "{{ download_path }}/genconf_win/ip-detect.ps1"
    mode: 0644
  when: "(dcos.config.ip_detect_win_contents is not defined) and (dcos['download_win'] is defined)"

- name: "Set default public IP detection Powershell script for {{ dcos_environment }} (overwrite by setting `dcos.config.ip_detect_public_win_contents`)"
  template:
    src: "{{ dcos_environment }}/ip-detect-public-win.j2"
    dest: "{{ download_path }}/genconf_win/ip-detect-public.ps1"
    mode: 0644
  when: "(dcos.config.ip_detect_public_win_contents is not defined) and (dcos['download_win'] is defined)"

# vvv FIXME: workaround for bad multi-line handling in DC/OS config vvv

- name: "Generate IP detection script from ip_detect_contents"
  copy:
    dest: "{{ download_path }}/genconf/ip-detect"
    mode: 0644
    content: "{{ dcos.config.ip_detect_contents }}"
  when: "dcos.config.ip_detect_contents is defined"
  notify: trigger_new_config

- name: "Generate IP detection script from ip_detect_public_contents"
  copy:
    dest: "{{ download_path }}/genconf/ip-detect-public"
    mode: 0644
    content: "{{ dcos.config.ip_detect_public_contents }}"
  when: "dcos.config.ip_detect_public_contents is defined"
  notify: trigger_new_config

- name: "Generate IP detection script from fault_domain_detect_contents"
  copy:
    dest: "{{ download_path }}/genconf/fault-domain-detect"
    mode: 0644
    content: "{{ dcos.config.fault_domain_detect_contents }}"
  when: "dcos.config.fault_domain_detect_contents is defined"
  notify: trigger_new_config

- name: "Generate IP detection Powershell script from ip_detect_win_contents"
  copy:
    dest: "{{ download_path }}/genconf_win/ip-detect.ps1"
    mode: 0644
    content: "{{ dcos.config.ip_detect_win_contents }}"
  when: "(dcos.config.ip_detect_win_contents is defined) and (dcos['download_win'] is defined)"

- name: "Generate IP detection Powershell script from ip_detect_public_win_contents"
  copy:
    dest: "{{ download_path }}/genconf_win/ip-detect-public.ps1"
    mode: 0644
    content: "{{ dcos.config.ip_detect_public_win_contents }}"
  when: "(dcos.config.ip_detect_public_win_contents is defined) and (dcos['download_win'] is defined)"

# vvv filter and generate config vvv

- name: Filter Config. Get rid of ip_detect_contents,ip_detect_contents and fault_domain_detect_contents
  set_fact:
    dcos_config: "{{ dcos_config | combine({item.key: item.value}) }}"
  when: "item.key not in ['ip_detect_contents','ip_detect_public_contents','fault_domain_detect_contents']"
  with_dict: "{{ dcos['config'] }}"

- name: Generate DC/OS configuration
  template:
    src: "config.yaml.j2"
    dest: "{{ download_path }}/genconf/config.yaml"
    mode: 0644
  notify: trigger_new_config

- name: Flush handler now
  meta: flush_handlers

# vvv GENERATE INSTALLER vvv

- name: Generate DC/OS bootstrap files
  command: "bash {{ install_file }}"
  args:
    chdir: "{{ download_path }}"
    creates: "{{ download_path }}/genconf/serve/dcos_install.sh"

- name: Unpack Windows installer packages
  command: "bash {{ install_win_file }}"
  args:
    chdir: "{{ download_path }}"
    creates: "{{ download_path }}/genconf_win/serve/prerequisites/dcos_install.ps1"
  when: dcos['download_win'] is defined

# vvv GENERATE UPGRADE SCRIPTS vvv

- name: Generate DC/OS upgrade files
  shell: >
    bash {{ install_file }} --generate-node-upgrade-script {{ item }};
    mv genconf/serve/upgrade genconf/serve/upgrade_from_{{ item }}
  args:
    warn: false
    chdir: "{{ download_path }}"
    creates: "{{ download_path }}/genconf/serve/upgrade_from_{{ item }}/"
  when: "dcos['version'] is version('1.9', '>=')"
  loop: >
    {{ groups['dcos'] | default([]) | map('extract',hostvars,'ansible_local')| list |
     select('defined') | selectattr('dcos_installation', 'defined') |
     map(attribute='dcos_installation') | map(attribute='version') | list |
     union([dcos['version_to_upgrade_from'] | default(dcos['version']) ]) | unique }}

- name: Get upgrade directory hash
  shell: |
    set -o pipefail
    ls -td -- */ | head -n 1 | cut -d'/' -f1
  args:
    chdir: "{{ download_path }}/genconf/serve/upgrade_from_{{ item }}"
  changed_when: false
  register: upgrade_dir_hash
  when: "dcos['version'] is version('1.9', '>=')"
  loop: >
    {{ groups['dcos'] | default([]) | map('extract',hostvars,'ansible_local')| list |
     select('defined') | selectattr('dcos_installation', 'defined') |
     map(attribute='dcos_installation') | map(attribute='version') | list |
     union([dcos['version_to_upgrade_from'] | default(dcos['version']) ]) | unique }}

- name: Create latest/ symlink for upgrade.sh
  file:
    path: "{{ download_path }}/genconf/serve/upgrade_from_{{ item.item }}/latest"
    src:  "{{ item.stdout }}"
    state: link
  when: "dcos['version'] is version('1.9', '>=')"
  loop: "{{ upgrade_dir_hash.results }}"

# vvv serve files via http vvv

- name: Serve bootstrap files via dockerized httpd
  docker_container:
    name: bootstrapnginx
    image: nginx
    ports:
     - "8080:80"
    volumes:
      - "{{ download_base_dir }}:/usr/share/nginx/html:ro"
